service: omni-p44-location-updates

provider:
  name: aws
  runtime: nodejs14.x
  versionFunctions: true
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  timeout: 30
  memorySize: 256
  deploymentBucket: ${ssm:/omni-dw/${self:provider.stage}/sls/deployment/bucket}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:PutSubscriptionFilter"
      Resource:
        - arn:aws:logs:us-east-1:332753493246:destination:bce-logs-cw-destination-us-east-1-${self:provider.stage}
    - Effect: Allow
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
        - "sqs:GetQueueAttributes"
        - "sqs:ReceiveMessage"
        - "sqs:DeleteMessage"
      Resource:
        - arn:aws:sqs:us-east-1:332281781429:omni-p44-location-updates-queue-${self:provider.stage}
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"
  stackTags:
    Application: P44LocationUpdates
    CreateBy: BizCloudExperts
    Version: "1.0"
    Environment: ${self:provider.stage}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    SERVICE: ${self:service}
    P44_SQS_QUEUE_URL: ${ssm:/omni-p44/location-updates/${self:provider.stage}/source/SQS.queue_url}

logSubscription:
  enabled: true
  destinationArn: arn:aws:logs:${self:provider.region}:332753493246:destination:bce-logs-cw-destination-${self:provider.region}-${self:provider.stage}
  filterPattern: '{$.service-name = "*"}'

plugins:
  - serverless-offline
  - serverless-plugin-log-subscription

functions:
  locationUpdatesApi: ${file(config/functions/locationUpdates.yml):function}
  p44ProcessFromSQS: ${file(config/functions/p44ProcessFromSQS.yml):function}

custom:
  standardResponseHeaders: 
    "Access-Control-Allow-Origin": "'*'"
    "Access-Control-Allow-Credentials": "'true'"
    "Access-Control-Allow-Headers": "'*'"

package:
  individually: true

layers:
  CommonLibs:
    path: lib
    name: ${self:service}-layer-${self:provider.stage}
    description: p44-location-updates-layer-${self:provider.stage}
    compatibleRuntimes:
      - nodejs14.x
    retain: false

resources:
  Resources:
    BadRequestResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: ACCESS_DENIED
        ResponseTemplates:
          application/json: |
            {
              "errorDescription":"$context.authorizer.message"
            }
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "400"
    AuthFailureGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
    LocationUpdatesP44DLQ: ${file(config/queues/locationUpdatesP44Queue.yml):LocationUpdatesP44DLQ}
    LocationUpdatesP44Queue: ${file(config/queues/locationUpdatesP44Queue.yml):LocationUpdatesP44Queue}
    LocationUpdatesTargetQueuePolicy: ${file(config/queues/locationUpdatesP44Queue.yml):LocationUpdatesTargetQueuePolicy}

    P44ShipmentLocationUpdates: ${file(config/dynamoDb/P44ShipmentLocationUpdates.yml):P44ShipmentLocationUpdates}